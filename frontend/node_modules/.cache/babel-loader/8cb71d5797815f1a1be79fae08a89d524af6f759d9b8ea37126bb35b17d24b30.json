{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nexport default function Keyboard() {\n  _s();\n  const keySounds = useRef({}); // intentionally left empty\n\n  // The keySounds object will be populated with new Audio objects\n  // when the app is opened, and each keyboard-press will play that\n  // existing Audio object, avoiding creating a new one upon every\n  // re-render. Apparently, a browser limits the amount of Audio\n  // objects you can have, depending on how many files it can load\n  // without timing out due to too many requests. (According to SO)\n\n  // Populating the keySounds object.\n  useEffect(() => {\n    keySounds.current[\"a\"] = new Audio(\"/keyboard-sounds/a1.wav\");\n    keySounds.current[\"as\"] = new Audio(\"/keyboard-sounds/a1s.wav\");\n    keySounds.current[\"b\"] = new Audio(\"/keyboard-sounds/b1.wav\");\n    keySounds.current[\"c\"] = new Audio(\"/keyboard-sounds/c1.wav\");\n    keySounds.current[\"cs\"] = new Audio(\"/keyboard-sounds/c1s.wav\");\n    keySounds.current[\"d\"] = new Audio(\"/keyboard-sounds/d1.wav\");\n    keySounds.current[\"ds\"] = new Audio(\"/keyboard-sounds/d1s.wav\");\n    keySounds.current[\"e\"] = new Audio(\"/keyboard-sounds/e1.wav\");\n    keySounds.current[\"f\"] = new Audio(\"/keyboard-sounds/f1.wav\");\n    keySounds.current[\"fs\"] = new Audio(\"/keyboard-sounds/f1s.wav\");\n    keySounds.current[\"g\"] = new Audio(\"/keyboard-sounds/g1.wav\");\n    keySounds.current[\"gs\"] = new Audio(\"/keyboard-sounds/g1s.wav\");\n  }, []);\n  function playKey(key) {\n    const sound = keySounds.current[key];\n    sound.play();\n  }\n\n  /*   return (\r\n      <div className=\"keyboard-container\">\r\n        <div className=\"white-key-container\">\r\n          <button className=\"white-key\" onClick={playKey(\"c\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"d\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"e\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"f\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"g\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"a\")}></button>\r\n          <button className=\"white-key\" onClick={playKey(\"b\")}></button>\r\n        </div>\r\n        <div className=\"black-key-container1\">\r\n          <button className=\"black-key\" onClick={playKey(\"cs\")}></button>\r\n          <button className=\"black-key\" onClick={playKey(\"ds\")}></button>\r\n        </div>\r\n        <div className=\"black-key-container2\">\r\n          <button className=\"black-key\" onClick={playKey(\"fs\")}></button>\r\n          <button className=\"black-key\" onClick={playKey(\"gs\")}></button>\r\n          <button className=\"black-key\" onClick={playKey(\"as\")}></button>\r\n        </div>\r\n      </div>\r\n    ); */\n}\n_s(Keyboard, \"L6SLzFXf/L7UzlN+HRz88Xotii0=\");\n_c = Keyboard;\nvar _c;\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"names":["useEffect","useRef","Keyboard","_s","keySounds","current","Audio","playKey","key","sound","play","_c","$RefreshReg$"],"sources":["C:/UWO/Summer-Projects/Backend-as-well/beats-maker-app/frontend/src/components/Keyboard.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nexport default function Keyboard() {\r\n  const keySounds = useRef({}) // intentionally left empty\r\n\r\n  // The keySounds object will be populated with new Audio objects\r\n  // when the app is opened, and each keyboard-press will play that\r\n  // existing Audio object, avoiding creating a new one upon every\r\n  // re-render. Apparently, a browser limits the amount of Audio\r\n  // objects you can have, depending on how many files it can load\r\n  // without timing out due to too many requests. (According to SO)\r\n\r\n  // Populating the keySounds object.\r\n  useEffect(()=>{\r\n    keySounds.current[\"a\"] = new Audio(\"/keyboard-sounds/a1.wav\")\r\n    keySounds.current[\"as\"] = new Audio(\"/keyboard-sounds/a1s.wav\")\r\n    keySounds.current[\"b\"] = new Audio(\"/keyboard-sounds/b1.wav\")\r\n    keySounds.current[\"c\"] = new Audio(\"/keyboard-sounds/c1.wav\")\r\n    keySounds.current[\"cs\"] = new Audio(\"/keyboard-sounds/c1s.wav\")\r\n    keySounds.current[\"d\"] = new Audio(\"/keyboard-sounds/d1.wav\")\r\n    keySounds.current[\"ds\"] = new Audio(\"/keyboard-sounds/d1s.wav\")\r\n    keySounds.current[\"e\"] = new Audio(\"/keyboard-sounds/e1.wav\")\r\n    keySounds.current[\"f\"] = new Audio(\"/keyboard-sounds/f1.wav\")\r\n    keySounds.current[\"fs\"] = new Audio(\"/keyboard-sounds/f1s.wav\")\r\n    keySounds.current[\"g\"] = new Audio(\"/keyboard-sounds/g1.wav\")\r\n    keySounds.current[\"gs\"] = new Audio(\"/keyboard-sounds/g1s.wav\")\r\n  }, [])\r\n\r\n  function playKey(key){\r\n    const sound = keySounds.current[key]\r\n    sound.play()\r\n  }\r\n  \r\n/*   return (\r\n    <div className=\"keyboard-container\">\r\n      <div className=\"white-key-container\">\r\n        <button className=\"white-key\" onClick={playKey(\"c\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"d\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"e\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"f\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"g\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"a\")}></button>\r\n        <button className=\"white-key\" onClick={playKey(\"b\")}></button>\r\n      </div>\r\n      <div className=\"black-key-container1\">\r\n        <button className=\"black-key\" onClick={playKey(\"cs\")}></button>\r\n        <button className=\"black-key\" onClick={playKey(\"ds\")}></button>\r\n      </div>\r\n      <div className=\"black-key-container2\">\r\n        <button className=\"black-key\" onClick={playKey(\"fs\")}></button>\r\n        <button className=\"black-key\" onClick={playKey(\"gs\")}></button>\r\n        <button className=\"black-key\" onClick={playKey(\"as\")}></button>\r\n      </div>\r\n    </div>\r\n  ); */\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,SAAS,GAAGH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC;;EAE7B;EACA;EACA;EACA;EACA;EACA;;EAEA;EACAD,SAAS,CAAC,MAAI;IACZI,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/DF,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC7DF,SAAS,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,SAASC,OAAOA,CAACC,GAAG,EAAC;IACnB,MAAMC,KAAK,GAAGL,SAAS,CAACC,OAAO,CAACG,GAAG,CAAC;IACpCC,KAAK,CAACC,IAAI,CAAC,CAAC;EACd;;EAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAACP,EAAA,CArDuBD,QAAQ;AAAAS,EAAA,GAART,QAAQ;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}